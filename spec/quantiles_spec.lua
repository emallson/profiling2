local newEstimator = require('quantiles')

local test_data = {362.463, 407.502, 797.552, 522.808, 774.693, 655.188, 445.614, 551.8, 776.903, 915.001, 167.443, 293.063, 694.921, 798.876, 299.398, 267.267, 223.013, 450.211, 221.625, 272.079, 107.218, 521.132, 386.619, 505.21, 496.653, 745.672, 246.692, 775.694, 696.821, 48.215, 440.144, 690.345, 579.05, 561.457, 197.525, 453.142, 535.117, 288.558, 516.529, 92.1126, 564.604, 317.062, 511.959, 758.109, 427.884, 556.898, 697.936, 916.261, 65.3226, 62.8709, 321.258, 129.645, 29.0662, 143.943, 810.731, 921.789, 498.372, 139.884, 610.929, 372.218, 792.192, 22.6413, 893.567, 337.127, 983.03, 499.921, 14.1073, 541.275, 404.202, 510.538, 411.235, 174.827, 539.757, 228.618, 150.023, 202.079, 724.23, 195.259, 878.186, 137.487, 561.635, 310.244, 444.071, 211.807, 97.0363, 11.3084, 883.803, 579.808, 958.086, 370.055, 849.469, 127.296, 529.598, 936.597, 248.301, 401.252, 36.907, 902.137, 146.566, 721.151, 89.0939, 552.772, 282.541, 303.326, 646.438, 737.38, 513.814, 174.896, 644.767, 700.175, 621.898, 914.777, 920.258, 371.128, 370.798, 299.172, 801.359, 708.012, 387.253, 827.737, 678.35, 59.3436, 858.794, 217.231, 233.961, 145.341, 106.174, 754.023, 198.594, 219.574, 823.681, 204.395, 887.545, 179.118, 860.792, 328.63, 233.931, 469.211, 540.805, 526.05, 93.8336, 70.9579, 54.1648, 184.008, 410.431, 528.921, 332.099, 877.871, 861.377, 986.937, 695.141, 273.99, 763.727, 52.6085, 155.198, 982.913, 310.088, 464.567, 982.195, 393.064, 869.09, 141.955, 505.904, 77.0712, 861.972, 427.131, 824.302, 620.433, 800.143, 419.52, 674.073, 208.253, 156.963, 620.102, 297.852, 727.005, 241.346, 364.044, 742.354, 677.144, 442.373, 969.05, 940.512, 470.563, 652.849, 840.893, 918.189, 297.758, 598.099, 65.5668, 971.585, 41.2557, 923.238, 626.26, 534.31, 501.118, 607.238, 988.516, 101.095, 364.105, 722.366, 478.783, 266.747, 755.077, 103.255, 706.784, 74.7231, 220.873, 66.258, 658.199, 566.67, 527.212, 751.614, 611.898, 744.949, 479.985, 870.462, 253.357, 387.681, 793.254, 990.018, 142.695, 736.971, 98.3035, 231.809, 164.078, 386.549, 560.869, 171.423, 836.12, 186.64, 828.71, 682.798, 936.764, 916.451, 563.326, 958.907, 29.0821, 791.485, 12.9285, 154.765, 512.174, 776.475, 497.325, 514.471, 966.273, 730.166, 267.161, 154.582, 935.207, 778.631, 192.563, 248.122, 434.061, 484.007, 252.877, 779.503, 736.192, 800.241, 563.322, 466.424, 917.647, 712.105, 313.319, 637.482, 857.835, 354.081, 725.144, 722.551, 604.406, 568.503, 25.2558, 272.616, 201.1, 116.207, 638.038, 608.97, 435.835, 746.293, 726.427, 637.811, 232.261, 849.975, 499.125, 530.626, 299.129, 235.995, 544.188, 207.27, 694.654, 972.317, 118.215, 251.688, 760.887, 953.004, 733.812, 200.673, 638.149, 804.328, 280.108, 641.851, 508.638, 531.763, 436.245, 99.7606, 140.525, 722.717, 211.875, 974.427, 279.008, 376.928, 47.1746, 244.99, 379.406, 542.822, 317.118, 117.401, 675.042, 847.686, 942.036, 391.603, 133.37, 779.522, 813.573, 913.931, 497.126, 54.7603, 801.015, 273.215, 912.7, 939.646, 472.694, 123.432, 327.487, 220.287, 641.643, 173.321, 863.931, 867.138, 330.216, 245.237, 401.457, 978.604, 608.253, 266.065, 799.784, 790.909, 734.615, 78.8646, 697.633, 175.967, 95.2127, 895.351, 656.683, 101.29, 727.47, 90.2073, 69.7268, 317.359, 286.204, 177.307, 422.929, 743.573, 529.241, 826.471, 258.139, 493.241, 209.76, 899.266, 999.704, 214.977, 471.906, 245.02, 762.395, 845.528, 184.369, 26.8849, 568.651, 279.236, 281.524, 133.586, 193.907, 959.383, 775.954, 466.319, 402.781, 444.722, 809.379, 571.094, 91.3278, 156.412, 292.458, 956.92, 230.346, 264.314, 503.671, 890.94, 548.129, 184.728, 857.738, 816.818, 710.657, 188.68, 739.447, 470.802, 581.654, 398.737, 541.437, 273.356, 940.294, 424.474, 665.802, 360.935, 473.618, 1.86531, 530.348, 351.388, 128.787, 931.554, 726.111, 478.731, 428.21, 76.8514, 425.464, 434.289, 553.513, 111.63, 159.18, 447.485, 972.173, 977.906, 458.606, 909.545, 91.6558, 509.934, 213.528, 378.1, 978.469, 704.544, 938.524, 502.75, 370.255, 644.903, 292.494, 958.13, 114.805, 594.637, 954.823, 845.41, 826.714, 217.914, 471.592, 396.652, 846.941, 359.236, 38.0454, 918.806, 575.028, 605.77, 318.42, 786.788, 172.718, 32.7643, 330.76, 459.803, 294.713, 285.132, 199.846, 869.354, 899.111, 746.109, 447.035, 174.065, 50.5029, 174.458, 262.964, 581.76, 755.407, 623.101, 403.5, 253.989, 774.002, 561.839, 436.621, 730.646, 662.621, 688.35, 946.041, 797.606, 59.1597, 207.445, 798.935, 646.964, 467.928, 24.548, 28.2534, 564.168, 70.3183, 823.048, 286.771, 28.121, 587.77, 158.736, 664.293, 760.998, 115.259, 971.173, 614.77, 537.673, 846.68, 98.7138, 779.085, 748.809, 822.265, 719.797, 435.978, 919.812, 474.005, 133.391, 226.128, 391.136, 824.088, 244.735, 111.077, 302.121, 456.012, 287.356, 259.656, 242.075, 735.596, 655.462, 792.729, 556.021, 871.709, 947.017, 507.597, 139.486, 855.895, 319.928, 569.582, 982.062, 315.118, 598.279, 934.974, 400.285, 171.554, 622.543, 370.139, 583.187, 983.141, 112.938, 535.034, 580.324, 805.013, 805.788, 300.423, 425.261, 518.181, 479.711, 364.761, 503.927, 925.115, 344.119, 235.604, 106.685, 616.936, 211.857, 325.834, 635.97, 453.671, 344.852, 761.503, 120.614, 273.612, 696.835, 273.076, 382.553, 33.9795, 180.534, 469.16, 461.387, 530.648, 180.238, 927.513, 934.905, 21.9851, 238.161, 69.7352, 770.126, 97.222, 414.784, 459.445, 48.2807, 164.128, 300.475, 423.05, 834.318, 48.1734, 274.379, 328.934, 718.668, 686.392, 333.468, 497.81, 990.795, 675.136, 102.744, 648.589, 446.553, 595.858, 478.531, 455.425, 960.533, 127.331, 473.076, 135.778, 565.927, 824.593, 947.948, 115.279, 632.695, 96.5365, 941.584, 430.979, 485.161, 570.996, 945.933, 187.064, 222.06, 353.136, 279.529, 515.462, 424.307, 44.2529, 410.276, 866.278, 659.422, 118.087, 549.315, 1.33292, 879.455, 688.347, 699.856, 657.109, 72.9607, 716.756, 405.957, 881.029, 974.483, 668.068, 904.639, 32.9632, 420.398, 484.39, 869.508, 848.476, 122.878, 89.0633, 25.2311, 938.365, 332.714, 224.873, 528.619, 85.4281, 729.734, 789.81, 944.981, 948.962, 905.081, 403.012, 19.1209, 508.088, 287.981, 962.661, 274.355, 622.071, 805.762, 6.0069, 44.6398, 633.858, 599.299, 691.393, 959.923, 320.399, 694.645, 571.594, 103.985, 276.021, 211.572, 220.074, 116.929, 658.959, 662.058, 734.953, 574.768, 639.133, 15.7523, 752.68, 33.6066, 731.805, 630.738, 9.902, 310.119, 512.864, 168.906, 776.673, 324.921, 680.681, 505.473, 519.718, 3.52667, 574.359, 109.126, 752.257, 742.763, 313.707, 891.387, 503.942, 181.543, 695.183, 409.024, 734.657, 871.626, 2.53944, 267.285, 195.892, 105.367, 353.454, 178.447, 102.976, 27.3406, 930.694, 883.405, 314.642, 947.445, 538.648, 758.56, 712.711, 176.898, 596.321, 343.061, 147.396, 246.228, 71.853, 728.537, 576.401, 186.997, 436.223, 581.837, 349.289, 671.289, 446.341, 677.292, 448.441, 601.66, 989.729, 107.108, 257.83, 866.234, 178.838, 943.073, 899.51, 581.992, 487.089, 872.796, 801.025, 541.266, 802.197, 910.975, 253.907, 187.111, 301.448, 963.276, 908.626, 741.136, 401.798, 363.73, 984.701, 367.127, 676.98, 418.179, 773.684, 123.167, 436.91, 79.0781, 132.691, 207.176, 804.073, 853.732, 752.166, 101.839, 362.339, 771.08, 645.633, 482.069, 229.708, 663.981, 85.5421, 708.739, 656.352, 337.757, 686.118, 74.0021, 673.842, 436.052, 751.889, 287.763, 79.5931, 649.403, 995.389, 354.314, 66.7948, 221.555, 140.455, 983.283, 497.97, 813.692, 240.902, 476.306, 685.602, 438.186, 108.85, 725.376, 670.244, 109.177, 333.9, 615.874, 472.464, 378.725, 143.732, 548.81, 351.188, 816.812, 375.175, 687.98, 214.602, 632.245, 569.084, 592.619, 285.009, 596.529, 780.058, 714.233, 157.193, 808.898, 502.643, 13.1235, 676.762, 835.761, 19.1154, 875.361, 483.89, 713.748, 545.764, 368.784, 63.0467, 245.936, 518.206, 689.833, 217.572, 793.419, 520.954, 470.717, 197.281, 157.356, 504.797, 419.26, 156.964, 591.165, 17.7961, 257.931, 680.149, 703.027, 914.186, 683.446, 634.165, 142.667, 455.807, 1.56638, 43.3996, 936.167, 288.273, 580.624, 387.288, 448.311, 197.093, 663.992, 868.775, 477.176, 297.725, 906.028, 716.298, 235.473, 20.3933, 477.712, 758.011, 313.996, 538.831, 95.5888, 232.797, 583.216, 65.1473, 752.336, 757.31, 356.808, 79.3806, 353.586, 650.314, 536.802, 807.794, 707.743, 675.182, 773.748, 37.2423, 346.288, 142.577, 229.644, 586.23, 954.65, 307.48, 151.649, 459.351, 692.603, 405.741, 191.486, 412.059, 463.643, 114.397, 451.384, 982.884, 425.666, 420.884, 824.607, 840.603, 297.425, 866.211, 715.658, 419.471, 732.322, 485.745, 789.436, 658.994, 110.53, 147.936, 751.299, 329.973, 664.15, 825.986, 307.151, 549.135, 70.7456, 113.496, 723.098, 513.895, 603.389, 610.307, 920.917, 596.2, 355.711, 554.255, 853.576, 488.691, 559.661, 856.206, 31.2406, 478.504, 918.783, 537.67, 880.65, 971.565, 457.211, 906.601, 757.97, 330.055, 891.679, 21.5516, 154.791, 670.181, 53.4372, 272.868, 332.035, 484.751, 637.919, 680.66, 15.4403, 719.817, 577.136, 593.047, 576.78, 477.733, 805.005, 399.629, 357.362, 643.071, 761.519, 5.56305, 746.637, 971.681, 595.935, 827.287}

local sorted_data = {}
for _, value in ipairs(test_data) do
  table.insert(sorted_data, value)
end
table.sort(sorted_data)

local function sample_quantile(p)
  local index = p * (#sorted_data - 1) + 1
  local left, right = math.floor(index), math.ceil(index)

  if left == right then
    return sorted_data[left]
  else
    return (sorted_data[left] + sorted_data[right]) / 2
  end
end

local function pct_err(approx, exact)
  return math.abs(approx - exact) / exact
end

local TOLERANCE = 0.02

describe('the quantile estimator', function()
  it('should correctly estimate the quantiles of a stream of data', function()
    local est = newEstimator()
    for _, value in ipairs(test_data) do
      est:update(value)
    end
    assert.are.equal(#test_data, est:sample_count())

    local quantiles = est:quantiles()
    assert.is_not_nil(quantiles)
    for key, est_quant in pairs(quantiles or {}) do
      local p = tonumber(key)
      assert.are.geq(TOLERANCE, pct_err(est_quant, sample_quantile(p)))
    end
  end)

  it('should have acceptable performance', function()
    math.randomseed(os.time())

    local RENDERS = 1000
    local FRAMES = 300

    local ests = {}
    for _ = 1, FRAMES do
      table.insert(ests, newEstimator())
    end

    local starttime = os.clock()
    for _ = 1, RENDERS do
      local value = math.random()
      for i = 1, FRAMES do
        ests[i]:update(value)
      end
    end
    local endtime = os.clock()

    local SIXTY_FPS = 1 / 60
    local TARGET = SIXTY_FPS / 100 * RENDERS
    local actual = endtime - starttime
    assert.are.geq(TARGET, actual)
  end)
end)
